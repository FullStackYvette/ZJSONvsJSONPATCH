import java.util.HashMap;
import com.fasterxml.jackson.databind.JsonNode;
import com.github.fge.jackson.JsonLoader;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import java.io.*;

public class TestData {
    //Array of Numbers
    public static final String originNum = "[ 100, 500, 300, 200, 400 ]";
    public static final String addNum = "[ 100, 500, 300, 200, 400, 500 ]";
    public static final String removeNum = "[ 100, 500, 200, 400 ]";
    public static final String replaceNum = "[ 100, 500, 200, 200, 400 ]";
    public static String[] numSet = new String[]{originNum,addNum,removeNum,replaceNum};

    //Array of String
    public static final String originStr ="[ \"This\", \"is\",\"a\",\"test\"]";
    public static final String addStr = "[ \"This\", \"is\", \"a\", \"json\",\"test\"]";
    public static final String removeStr = "[ \"This\", \"is\", \"test\"]";
    public static final String replaceStr = "[ \"This\", \"is\", \"a\",\"rest\"]";
    public static String[] strSet = new String[]{originStr,addStr,removeStr,replaceStr};

    //Array of Boolean
    public static final String originBool = "[true, false]";
    public static final String addBool = "[true, true, false]";
    public static final String removeBool = "[true]";
    public static final String replaceBool = "[false, false]";
    public static String[] boolSet = new String[] {originBool, addBool,removeBool,replaceBool};

    //Array of Null
    public static final String originNull = "[null, null]";
    public static final String addNull = "[null,null,null]";
    public static final String removeNull = "[null]";
    public static String[] nullSet = new String[] {originNull, addNull, removeNull};

    private static String originObject = "{\"_clientId\":\"ABCBank\",\"_instanceId\":\"123\"}";
    private static String addObject = "{\"_clientId\":\"ABCBank\",\"_instanceId\":\"123\",\"_ingest_ts\":\"1488938486000\"}";
    private static String removeObject = "{\"_clientId\":\"ABCBank\"}";
    private static String replaceObject = "{\"_clientId\":\"ABKBank\",\"_instancePd\":\"123\"}";
    public static String[] objectSet = new String[]{originObject,addObject,removeObject,replaceObject};

    private static String jsonArrayPath = "./src/main/resources/objectArray.json";
    private static String nestedArrayPath = "./src/main/resources/HighlyNestedData.json";
    private static String testLoan = "./src/main/resources/loan1.json";


    public static JsonNode[] JsonArraySet() throws Exception
    {

        ObjectMapper mapper = new ObjectMapper();
        JsonNode originJsonArray = mapper.readTree(new File(jsonArrayPath));

        JsonNode addJsonArray=mapper.readTree(new File(jsonArrayPath)).get("fields");
        if (addJsonArray.isArray()) {
            for (final JsonNode objNode : addJsonArray) {
                if(objNode.path("dbFieldName").asText().equals("regulation_z_id"))
                    ((ObjectNode) objNode).put("autogenerated","yes");
            }
        }
        ObjectNode newNode = mapper.createObjectNode();
        newNode.put("dbFieldName", "newNode_id");
        newNode.put("foreignKey", "NewNodeTable.newNode_id:null");
        ((ArrayNode)addJsonArray).add(newNode);

        JsonNode removeJsonArray = mapper.readTree(new File(jsonArrayPath)).get("fields");
        if (removeJsonArray .isArray()) {
            for (final JsonNode objNode : removeJsonArray ) {
                if(objNode.path("dbFieldName").asText().equals("privacy_policy_id"))
                    ((ObjectNode) objNode).remove("value");
                if(objNode.path("dbFieldName").asText().equals("profit_management_id"))
                    ((ArrayNode)removeJsonArray).remove(objNode.hashCode());
            }
        }

        JsonNode replaceJsonArray = mapper.readTree(new File(jsonArrayPath)).get("fields");
        if (replaceJsonArray .isArray()) {
            for (final JsonNode objNode : replaceJsonArray ) {
                if(objNode.path("dbFieldName").asText().equals("privacy_policy_id"))
                    ((ObjectNode) objNode).put("value", "12345");
            }
        }
        return new JsonNode[]{originJsonArray,addJsonArray,removeJsonArray,replaceJsonArray};
    }

    public static JsonNode[] HighlyNestedData() throws Exception
    {

        ObjectMapper mapper = new ObjectMapper();
        JsonNode originJson = mapper.readTree(new File(nestedArrayPath)).get(0);

        JsonNode addJson=mapper.readTree(new File(nestedArrayPath)).get(0);
        ((ObjectNode)addJson).put("new feature","yes");
         ObjectNode n1 = mapper.createObjectNode();
         n1.put("id","1005");
         n1.put("type", "Banana");
         ObjectNode n2 = mapper.createObjectNode();
         n2.put("id", "5005");
         n2.put("type","spicy");
        ((ArrayNode)addJson.get("batters").get("batter")).add(n1);
        ((ArrayNode)addJson.get("topping")).add(n2);

        JsonNode removeJson=mapper.readTree(new File(nestedArrayPath)).get(0);
        ((ObjectNode)removeJson).remove("ppu");
        ((ArrayNode)removeJson.get("batters").get("batter")).remove(0);
        ((ArrayNode)removeJson.get("topping")).remove(0);

        JsonNode replaceJson=mapper.readTree(new File(nestedArrayPath)).get(0);
        ((ObjectNode)replaceJson).put("ppu",1.2);
        ((ObjectNode)((ArrayNode)replaceJson.get("batters").get("batter")).get(0)).put("type","No flavor");
        return new JsonNode[]{originJson, addJson,removeJson,replaceJson};
    }

    public static JsonNode[] HighlyNestedDataArray() throws Exception
    {

        ObjectMapper mapper = new ObjectMapper();
        JsonNode originJson = mapper.readTree(new File(nestedArrayPath));

        JsonNode addJson=mapper.readTree(new File(nestedArrayPath));
        ((ObjectNode)addJson.get(0)).put("new feature","yes");
        ObjectNode n1 = mapper.createObjectNode();
        n1.put("id","1005");
        n1.put("type", "Banana");
        ObjectNode n2 = mapper.createObjectNode();
        n2.put("id", "5005");
        n2.put("type","spicy");
        ((ArrayNode)addJson.get(0).get("batters").get("batter")).add(n1);
        ((ArrayNode)addJson.get(0).get("topping")).add(n2);

        JsonNode removeJson=mapper.readTree(new File(nestedArrayPath));
        ((ObjectNode)removeJson.get(0)).remove("ppu");
        ((ArrayNode)removeJson.get(0).get("batters").get("batter")).remove(0);
        ((ArrayNode)removeJson.get(0).get("topping")).remove(0);

        JsonNode replaceJson=mapper.readTree(new File(nestedArrayPath));
        ((ObjectNode)replaceJson.get(0)).put("ppu",1.2);
        ((ObjectNode)((ArrayNode)replaceJson.get(0).get("batters").get("batter")).get(0)).put("type","No flavor");
        return new JsonNode[]{originJson, addJson,removeJson,replaceJson};
    }

    public static JsonNode[] originModifiedLoan() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        JsonNode originJson = mapper.readTree(new File(testLoan));
        JsonNode modifiedJson = mapper.readTree(new File(testLoan));
        ((ObjectNode)(modifiedJson.get("Applications").get(0).get("Borrower"))).put("ExperianCreditScore","800");
        ((ArrayNode)(modifiedJson.get("Applications").get(0).get("Assets"))).remove(21);
        ArrayNode parentNodes= ((ArrayNode)modifiedJson.get("ClosingCost").get("FeeVariances"));
        JsonNode node1 = parentNodes.get(0);
        JsonNode node2 =parentNodes.get(1);
        parentNodes.set(0, node2);
        parentNodes.set(1, node1);
        ((ObjectNode)parentNodes.get(2)).remove("InitialLE");
        ((ObjectNode)parentNodes.get(2)).remove("Itemization");
        ObjectNode node3 = mapper.createObjectNode();
        node3.put("Gfe2010FeeIndex", 14);
        node3.put("Gfe2010FeeParentType", "POCPTC800");
        node3.put("Id", "Gfe2010Fee\\/10");
        node3.put("PocPtcIndicator", true);
        ((ArrayNode)modifiedJson.get("ClosingCost").get("Gfe2010").get("Gfe2010Fees")).add(node3);
        ((ObjectNode)modifiedJson.get("DocumentLogs").get(0)).put("AllowedRoleDelimitedList","1,4,5");
        return new JsonNode[]{originJson,modifiedJson};

    }
}

